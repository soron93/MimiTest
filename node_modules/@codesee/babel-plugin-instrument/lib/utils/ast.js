"use strict";Object.defineProperty(exports,"__esModule",{value:!0});exports.liftAndReplace=liftAndReplace;exports.objToAST=objToAST;exports.insertAsFirstStatementOfBlock=insertAsFirstStatementOfBlock;exports.matchStringsToExpressionPath=matchStringsToExpressionPath;var _utils=require("./utils");function _typeof(a){"@babel/helpers - typeof";if("function"==typeof Symbol&&"symbol"==typeof Symbol.iterator){_typeof=function(a){return typeof a}}else{_typeof=function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a}}return _typeof(a)}function liftAndReplace(a,b,c){var d=3<arguments.length&&arguments[3]!==void 0?arguments[3]:{},e=d.statementPath,f=d.postProcessReplacement,g=d.noOpIfIdentifier;if(g&&b.isIdentifier()){return}if(!e){e=b.getStatementParent()}var h=(0,_utils.generateTempIdentifier)(e.scope,c),i=a.VariableDeclarator(h,b.node);h.start=i.start=b.node.start;h.end=i.end=b.node.end;h.loc=i.loc=b.node.loc;var j=h;if(f){j=f(h)}b.replaceWith(j);var k=a.VariableDeclaration("const",[i]);k.codesee=!0;var l=e.insertBefore(k)[0];return l}function objToAST(a,b){var c=[];for(var g in b){var d=a.identifier(g),e=b[g],f=void 0;if(a.isNode(e)){f=e}else if("object"===_typeof(e)){f=objToAST(a,e)}else if("number"==typeof e){f=a.numericLiteral(e)}else if("string"==typeof e){f=a.stringLiteral(e)}else{throw["objToAST(): Attempt to create AST from unsupported value: "+e]}c.push(a.objectProperty(d,f))}return a.objectExpression(c)}function insertAsFirstStatementOfBlock(a,b){var c=a.get("body"),d=c[0];if(d){d.insertBefore(b)}else{a.node.body=[b]}}function matchStringsToExpressionPath(a,b){if(hasName(b)&&1==a.length){return matchName(b,a[0])}if(b.isMemberExpression()&&2<=a.length){var c=a.pop(),d=b.get("property");if(hasName(d)&&matchName(d,c)){if(hasName(b.get("object"))&&1==a.length){var e=a.pop();return matchName(b.get("object"),e)}else if(b.get("object").isMemberExpression()&&1<a.length){return matchStringsToExpressionPath(a,b.get("object"))}}}return!1}function hasName(a){return a.isIdentifier()||a.isImport()||a.isThisExpression()}function matchName(a,b){if(a.isIdentifier()){return a.node.name===b||"*"===b}else if(a.isImport()){return"import"===b}else if(a.isThisExpression()){return"this"===b}return!1}